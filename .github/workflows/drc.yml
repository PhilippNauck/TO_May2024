#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

name: DRC

on: 
    #push
    pull_request:
        types: [opened, reopened]
    workflow_dispatch:
        inputs:
            files:
                description: 'Enter a comma-separated list of files'
                required: true
                default: 'file1.txt,file2.txt'

jobs:
    drc:
        runs-on: ubuntu-latest
        steps:
            -   name: Get all files
                uses: actions/checkout@master
            -   name: Get changed files
                if: github.event_name == 'pull_request'
                id: get-changed-files
                run: |
                  changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
                  
                  files_json=$(echo "$changed_files" | jq -R -s -c 'split("\n") | map(select(length > 0))')
                  echo $files_json
                  echo "::set-output name=files::$files_json"
                shell: bash
        
                # Schritt 2: Manuelle Dateiliste eingeben
            -   name: Use manually input
                if: github.event_name == 'workflow_dispatch'
                id: manual-files
                run: |
                  files_input="${{ github.event.inputs.files }}"
                  
                  files_json=$(echo "$files_input" | jq -R -s -c 'split(",") | map(select(length > 0))')
                  echo $files_json
                  echo "::set-output name=files::$files_json"
                shell: bash
        
                # Schritt 3: Ausgabe der erstellten Dateienliste
            -   name: Installing p7zip
                run: |
                    sudo apt-get install p7zip-full 
            -   name: Installing Klayout
                run: |
                    sudo apt update -qq -y
                    # The dpkg command will fail complaining about missing dependencies.
                    sudo dpkg -i ./drc/klayout_0.29.6-1_amd64.deb || true
                    # The apt install command should install the missing dependencies
                    # needed by KLayout above and finish the install.
                    sudo apt install -f -y
                    # Check that KLayout was successfully installed!
                    klayout -v
            -   name: drc
                run: |
                    jq --version;
                    klayout -v;
                    echo "Files:"
                    #echo ${{ steps.changed-files.outputs.all_changed_files }}
                    files=${{ steps.get-changed-files.outputs.files || steps.manual-files.outputs.files }}
                    echo $files
                    mkdir ${{ github.workspace }}/drc/Results
                    result=true;
                    Zips=0

                    type_signature=$(declare -p "$files" 2>/dev/null)

                    if [[ "$type_signature" =~ "declare --" ]]; then
                        echo "string"
                    elif [[ "$type_signature" =~ "declare -a" ]]; then
                        echo "array"
                    elif [[ "$type_signature" =~ "declare -A" ]]; then
                        echo "map"
                    else
                        echo "none"
                    fi

                    #echo $files | jq
                    #echo $files | jq -r '.[]'
                    #for file in $(echo $files | jq -r '.[]'); do
                    for file in $files; do
                        echo "Processing file: $file"
                        FileRe="\.gds"
                        if [[ $file =~ $FileRe ]]; then 
                            ZipRe="\.zip"
                            GDSRe="\.gds$"
                            if [[ $file =~ $ZipRe ]]; then 
                                ZIP_FILE="${{ github.workspace }}/${file}"
                                # Zielverzeichnis für das Entpacken
                                EXTRACT_DIR="${ZIP_FILE%/*}/Folder$Zips"

                                # Überprüfen, ob die ZIP-Datei existiert
                                if [[ ! -f "$ZIP_FILE" ]]; then
                                    echo "ZIP-Datei nicht gefunden: $ZIP_FILE"
                                    exit 1
                                fi

                                7z x "$ZIP_FILE" -o"$EXTRACT_DIR"

                                # Dateiformat, nach dem gesucht wird (z.B. '.txt' für Textdateien)
                                file_extension=gds

                                file_array=($(find "$EXTRACT_DIR" -type f -iname "*$file_extension"))

                                # Ausgabe der Dateien im Array
                                echo "Gefundene Dateien:"
                                for ZipContentFile in "${file_array[@]}"; do
                                    echo "$ZipContentFile"

                                    echo "Run DRC for $ZipContentFile";
                                    path=$ZipContentFile;
                                    resultpath=${{ github.workspace }}/drc/Results/${ZipContentFile//[\/.]/_}.lyrdb;
                                    # OUTPUT=$(klayout -b -r ${{ github.workspace }}/drc/drc.lydrc -rd "in_gds"="${path}" -rd "report_file"="${resultpath}")

                                    command_output=$(mktemp)
                                    klayout -b -r ${{ github.workspace }}/drc/drc.lydrc -rd "in_gds"="${path}" -rd "report_file"="${resultpath}" | tee "$command_output"

                                    OUTPUT=$(cat "$command_output")

                                    re="Number of DRC errors: [0-9]+"
                                    if [[ $OUTPUT =~ $re ]]; then
                                        NumberRe="[0-9]+"
                                        if [[ $BASH_REMATCH =~ $NumberRe ]]; then 
                                            if (($BASH_REMATCH == 0))
                                            then 
                                                echo "DRC pass";
                                            else
                                                echo "DRC fail";
                                                result=false;
                                            fi
                                        else 
                                            echo "DRC fail";
                                            result=false;
                                        fi
                                    else
                                        echo "DRC fail";
                                        result=false;
                                    fi
                                done
                                Zips=$((Zips + 1))
                            elif [[ $file =~ $GDSRe ]]; then
                                echo "Run DRC for $file";
                                path=${{ github.workspace }}/${file};
                                resultpath=${{ github.workspace }}/drc/Results/${file//[\/.]/_}.lyrdb;

                                command_output=$(mktemp)

                                klayout -b -r ${{ github.workspace }}/drc/drc.lydrc -rd "in_gds"="${path}" -rd "report_file"="${resultpath}" | tee "$command_output"

                                OUTPUT=$(cat "$command_output")

                                re="Number of DRC errors: [0-9]+"
                                if [[ $OUTPUT =~ $re ]]; then
                                    NumberRe="[0-9]+"
                                    if [[ $BASH_REMATCH =~ $NumberRe ]]; then 
                                        if (($BASH_REMATCH == 0))
                                        then 
                                            echo "DRC pass";
                                        else
                                            echo "DRC fail";
                                            result=false;
                                        fi
                                    else 
                                        echo "DRC fail";
                                        result=false;
                                    fi
                                else
                                    echo "DRC fail";
                                    result=false;
                                fi
                            fi
                        fi
                    done
                    if [[ $result == false ]]
                    then 
                        exit 130 
                    fi
            -   name: Archive DRC Results
                uses: actions/upload-artifact@v4
                if: always()
                with:
                    name: DRC-Results
                    path: ${{ github.workspace }}/drc/Results
